import json
import boto3

dynamodb = boto3.resource('dynamodb')
table_name = 'VotesTable'

def lambda_handler(event, context):
    table = dynamodb.Table(table_name)
    members_votes = {'Member 1': 0, 'Member 2': 0, 'Member 3': 0}
    response = table.scan()
    for item in response['Items']:
        member_name = item['MemberName']
        voted = item['Voted']
        if voted:
            members_votes[member_name] += 1
    return {
        'statusCode': 200,
        'body': json.dumps(members_votes)
    }


///
import boto3

dynamodb = boto3.resource('dynamodb')
table_name = 'VotesTable'

def lambda_handler(event, context):
    table = dynamodb.Table(table_name)

    # Dictionary to store the count of true votes for each member
    member_votes = {}

    # Scan the DynamoDB table to retrieve all items
    response = table.scan()

    # Process each item in the response
    for item in response['Items']:
        member_name = item['MemberName']
        voted = item['Voted']

        # Increment the count of true votes for the member
        if voted:
            member_votes[member_name] = member_votes.get(member_name, 0) + 1

    # Return the counts of true votes for each member
    return {
        'statusCode': 200,
        'body': member_votes
    }




/////final getting results////////
import boto3

dynamodb = boto3.resource('dynamodb')
table_name = 'VotesTable'

def lambda_handler(event, context):
    table = dynamodb.Table(table_name)

    # Dictionary to store the count of true votes for each member
    member_votes = {}

    # Scan the DynamoDB table to retrieve all items
    response = table.scan()

    # Process each item in the response
    for item in response['Items']:
        member_name = item['MemberName']
        voted = item['Voted']

        # Increment the count of true votes for the member
        if voted:
            member_votes[member_name] = member_votes.get(member_name, 0) + 1

    # Return the counts of true votes for each member
    return {
        'statusCode': 200,
        'body': member_votes
    }